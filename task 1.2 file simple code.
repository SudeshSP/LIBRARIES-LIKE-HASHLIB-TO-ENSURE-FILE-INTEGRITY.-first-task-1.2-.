import hashlib
import sys
from pathlib import Path

def file_hash(path):
    """Return SHA-256 hash of the file as a hex string."""
    h = hashlib.sha256()
    with open(path, 'rb') as f:
        for chunk in iter(lambda: f.read(8192), b''):
            h.update(chunk)
    return h.hexdigest()

def create_baseline(file_list, baseline_file):
    with open(baseline_file, 'w') as out:
        for f in file_list:
            out.write(f"{f}:{file_hash(f)}\n")

def check_integrity(baseline_file):
    with open(baseline_file) as f:
        for line in f:
            fname, expected = line.strip().split(':')
            current = file_hash(fname)
            if current == expected:
                print(f"[OK] {fname}")
            else:
                print(f"[CHANGED] {fname}")

if __name__ == "__main__":
    if len(sys.argv) < 3:
        print("Usage:")
        print("  python3 file_integrity.py init <files...> <baseline.txt>")
        print("  python3 file_integrity.py check <baseline.txt>")
        sys.exit(1)

    mode = sys.argv[1]
    if mode == "init":
        *files, baseline = sys.argv[2:]
        create_baseline(files, baseline)
        print(f"Baseline saved to {baseline}")
    elif mode == "check":
        baseline = sys.argv[2]
        check_integrity(baseline)
    else:
        print("Invalid mode. Use init or check.")
